import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { DoctorAppointmentApi } from "../../service/DoctorAppointmentApi";

export default function AppointmentNoteForm({ appointment, onClose, onSave }) {
    const [formData, setFormData] = useState({
        note: "",
        labRequests: []
    });
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [savingNote, setSavingNote] = useState(false);
    const [savingLabRequests, setSavingLabRequests] = useState(false);
    const [error, setError] = useState("");
    const [medicalVisitId, setMedicalVisitId] = useState(null);

    useEffect(() => {
        if (appointment && appointment.patient) {
            fetchMedicalVisit();
        }
    }, [appointment]);

    const fetchMedicalVisit = async () => {
        try {
            setLoading(true);
            console.log(appointment.id);
            const response = await DoctorAppointmentApi.getMedicalVisit(
                appointment.id,
                appointment.patient.id
            );

            // Map response to form data
            setMedicalVisitId(response.medicalVisit.id);
            setFormData({
                note: response.medicalVisit.note || "",
                labRequests: response.labRequests.map(lab => ({
                    labId: lab.labId,
                    visitId: lab.visitId,
                    requestedBy: lab.requestedBy,
                    roomId: lab.roomId,
                    testType: lab.testType,
                    result: lab.result || "",
                    status: lab.status || "PENDING",
                    price: lab.price || 0
                }))
            });
        } catch (err) {
            console.error("Error fetching medical visit:", err);
            setError("Không thể tải thông tin khám bệnh. Vui lòng thử lại!");
        } finally {
            setLoading(false);
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const addLabRequest = () => {
        setFormData(prev => ({
            ...prev,
            labRequests: [...prev.labRequests, {
                labId: null, // Will be generated by backend
                visitId: medicalVisitId,
                requestedBy: "", // Will be set by backend (doctor info)
                roomId: null,
                testType: "",
                result: "",
                status: "PENDING",
                price: 0
            }]
        }));
    };

    const removeLabRequest = (index) => {
        setFormData(prev => ({
            ...prev,
            labRequests: prev.labRequests.filter((_, i) => i !== index)
        }));
    };

    const updateLabRequest = (index, field, value) => {
        setFormData(prev => ({
            ...prev,
            labRequests: prev.labRequests.map((item, i) => {
                if (i === index) {
                    return { ...item, [field]: value };
                }
                return item;
            })
        }));
    };

    const getLabRequestsCount = () => {
        return formData.labRequests.filter(request => request.testType).length;
    };

    const getTotalAmount = () => {
        return formData.labRequests.reduce((total, request) => total + (request.price || 0), 0);
    };

    const isAnyOperationInProgress = () => {
        return loading || saving || savingNote || savingLabRequests;
    };

    const getNewLabRequestsCount = () => {
        return formData.labRequests.filter(request => request.testType && !request.labId).length;
    };

    const getNewLabRequestsTotal = () => {
        return formData.labRequests
            .filter(request => request.testType && !request.labId)
            .reduce((total, request) => total + (request.price || 0), 0);
    };

    // Save medical visit note only
    const handleSaveNote = async () => {
        if (!formData.note.trim()) {
            setError("Vui lòng nhập ghi chú khám bệnh!");
            return;
        }

        try {
            setSavingNote(true);
            setError("");

            const noteData = {
                note: formData.note.trim()
            };

            await DoctorAppointmentApi.updateMedicalVisitNote(
                appointment.id,
                noteData
            );

            alert("Lưu ghi chú khám bệnh thành công!");
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu ghi chú khám bệnh. Vui lòng thử lại!");
            console.error("Error saving note:", err);
        } finally {
            setSavingNote(false);
        }
    };

    // Save lab requests only
    const handleSaveLabRequests = async () => {
        const newLabRequests = formData.labRequests.filter(request =>
            request.testType && !request.labId // New requests don't have labId yet
        );

        if (newLabRequests.length === 0) {
            setError("Không có xét nghiệm mới nào để lưu!");
            return;
        }

        try {
            setSavingLabRequests(true);
            setError("");

            for (const labRequest of newLabRequests) {
                const labRequestData = {
                    requestedBy: labRequest.requestedBy,
                    roomId: labRequest.roomId,
                    testType: labRequest.testType,
                    result: labRequest.result,
                    status: labRequest.status || "PENDING",
                    price: labRequest.price || 0
                };

                await DoctorAppointmentApi.createLabRequest(medicalVisitId, labRequestData);
            }

            alert(`Đã thêm ${newLabRequests.length} xét nghiệm thành công!`);
            // Refresh data after adding lab requests
            fetchMedicalVisit();
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu xét nghiệm. Vui lòng thử lại!");
            console.error("Error saving lab requests:", err);
        } finally {
            setSavingLabRequests(false);
        }
    };

    // Save both note and lab requests
    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!formData.note.trim()) {
            setError("Vui lòng nhập ghi chú khám bệnh!");
            return;
        }

        try {
            setSaving(true);
            setError("");

            // First, update medical visit with note
            const noteData = {
                note: formData.note.trim()
            };

            await DoctorAppointmentApi.updateMedicalVisitNote(
                appointment.id,
                appointment.patient.id,
                noteData
            );

            // Then, create new lab requests
            const newLabRequests = formData.labRequests.filter(request =>
                request.testType && !request.labId // New requests don't have labId yet
            );

            for (const labRequest of newLabRequests) {
                const labRequestData = {
                    requestedBy: labRequest.requestedBy,
                    roomId: labRequest.roomId,
                    testType: labRequest.testType,
                    result: labRequest.result,
                    status: labRequest.status || "PENDING",
                    price: labRequest.price || 0
                };

                await DoctorAppointmentApi.createLabRequest(medicalVisitId, labRequestData);
            }

            onSave();
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu thông tin khám bệnh. Vui lòng thử lại!");
            console.error("Error saving medical visit:", err);
        } finally {
            setSaving(false);
        }
    };

    const formatPatientInfo = () => {
        const patient = appointment?.patient;
        if (!patient) return "N/A";

        function formatDate(dateString) {
            if (!dateString) return "null";

            let d = new Date(
                /(\+|\-)\d{2}:\d{2}|Z$/.test(dateString)
                    ? dateString
                    : dateString.replace(' ', 'T')
            );

            if (isNaN(d.getTime())) return dateString;

            // Hiển thị theo múi giờ máy người dùng (local time)
            const day = String(d.getDate()).padStart(2, '0');
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const year = d.getFullYear();
            const hour = String(d.getHours()).padStart(2, '0');
            const minute = String(d.getMinutes()).padStart(2, '0');

            return `${day}/${month}/${year} ${hour}:${minute}`;
        }

        return (
            <div className="d-flex align-items-center">
                <div className="me-3">
                    <div className="fw-bold">{patient.fullName || "N/A"}</div>
                    <small className="text-muted">
                        <i className="fas fa-phone me-1"></i>
                        {patient.phone || "N/A"}
                    </small>
                </div>
                <div className="text-muted">
                    <small>
                        <i className="fas fa-calendar me-1"></i>
                        {formatDate(appointment.scheduledTime)}

                    </small>
                </div>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="modal show d-block" style={{ backgroundColor: "rgba(0,0,0,0.5)" }}>
                <div className="modal-dialog modal-lg">
                    <div className="modal-content">
                        <div className="modal-body text-center py-5">
                            <div className="spinner-border text-primary mb-3" role="status">
                                <span className="visually-hidden">Đang tải...</span>
                            </div>
                            <h5>Đang tải thông tin khám bệnh...</h5>
                            <p className="text-muted">Vui lòng chờ trong giây lát</p>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="modal show d-block" style={{ backgroundColor: "rgba(0,0,0,0.5)" }}>
            <div className="modal-dialog modal-lg">
                <motion.div
                    className="modal-content"
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                >
                    <div className="modal-header">
                        <h5 className="modal-title">
                            <i className="fas fa-stethoscope me-2"></i>
                            {appointment?.note ? "Cập nhật thông tin khám" : "Thông tin khám bệnh"}
                        </h5>
                        <button
                            type="button"
                            className="btn-close"
                            onClick={onClose}
                            disabled={loading || saving || savingNote || savingLabRequests}
                        ></button>
                    </div>

                    <form onSubmit={handleSubmit}>
                        <div className="modal-body">
                            {error && (
                                <div className="alert alert-danger" role="alert">
                                    {error}
                                </div>
                            )}

                            {/* Patient Info */}
                            <div className="bg-light rounded p-3 mb-4">
                                <h6 className="fw-bold mb-2">
                                    <i className="fas fa-user me-2"></i>
                                    Thông tin bệnh nhân
                                </h6>
                                {formatPatientInfo()}
                            </div>

                            {/* Note Input */}
                            <div className="mb-3">
                                <div className="d-flex justify-content-between align-items-center mb-2">
                                    <label className="form-label fw-bold">
                                        Ghi chú khám bệnh <span className="text-danger">*</span>
                                    </label>
                                    <button
                                        type="button"
                                        className="btn btn-sm btn-outline-primary"
                                        onClick={handleSaveNote}
                                        disabled={loading || savingNote || !formData.note.trim()}
                                    >
                                        {savingNote ? (
                                            <>
                                                <div className="spinner-border spinner-border-sm me-1" role="status"></div>
                                                Đang lưu...
                                            </>
                                        ) : (
                                            <>
                                                <i className="fas fa-save me-1"></i>
                                                Lưu ghi chú
                                            </>
                                        )}
                                    </button>
                                </div>
                                <textarea
                                    className="form-control"
                                    name="note"
                                    value={formData.note}
                                    onChange={handleInputChange}
                                    rows="4"
                                    placeholder="Nhập ghi chú về tình trạng sức khỏe, kết quả khám, chẩn đoán và hướng điều trị..."
                                    required
                                    autoFocus
                                    disabled={loading || savingNote}
                                />
                                <small className="text-muted">
                                    Ghi chú sẽ được lưu vào hồ sơ bệnh nhân
                                </small>
                            </div>

                            {/* Lab Requests */}
                            <div className="mb-3">
                                <div className="d-flex justify-content-between align-items-center mb-2">
                                    <label className="form-label fw-bold">
                                        Xét nghiệm/Dịch vụ
                                    </label>
                                    <div>
                                        <button
                                            type="button"
                                            className="btn btn-sm btn-outline-success me-2"
                                            onClick={addLabRequest}
                                            disabled={loading || savingLabRequests}
                                        >
                                            <i className="fas fa-plus-circle me-1"></i>
                                            Thêm xét nghiệm
                                        </button>
                                        <button
                                            type="button"
                                            className="btn btn-sm btn-outline-primary"
                                            onClick={handleSaveLabRequests}
                                            disabled={loading || savingLabRequests || getNewLabRequestsCount() === 0}
                                        >
                                            {savingLabRequests ? (
                                                <>
                                                    <div className="spinner-border spinner-border-sm me-1" role="status"></div>
                                                    Đang lưu...
                                                </>
                                            ) : (
                                                <>
                                                    <i className="fas fa-flask me-1"></i>
                                                    Lưu xét nghiệm ({getNewLabRequestsCount()} mới)
                                                </>
                                            )}
                                        </button>
                                    </div>
                                </div>
                                {formData.labRequests.map((request, index) => (
                                    <div key={request.labId || index} className="border rounded p-3 mb-2 bg-light">
                                        <div className="row">
                                            <div className="col-md-4">
                                                <label className="form-label fw-bold">Loại xét nghiệm</label>
                                                <input
                                                    type="text"
                                                    className="form-control form-control-sm"
                                                    placeholder="Nhập tên xét nghiệm"
                                                    value={request.testType}
                                                    onChange={(e) => updateLabRequest(index, 'testType', e.target.value)}
                                                    disabled={loading || savingLabRequests}
                                                />
                                            </div>
                                            <div className="col-md-3">
                                                <label className="form-label fw-bold">Giá tiền</label>
                                                <input
                                                    type="number"
                                                    className="form-control form-control-sm"
                                                    placeholder="0"
                                                    value={request.price}
                                                    onChange={(e) => updateLabRequest(index, 'price', parseFloat(e.target.value) || 0)}
                                                    disabled={loading || savingLabRequests}
                                                />
                                            </div>
                                            <div className="col-md-3">
                                                <label className="form-label fw-bold">Ghi chú</label>
                                                <input
                                                    type="text"
                                                    className="form-control form-control-sm"
                                                    placeholder="Ghi chú cho xét nghiệm"
                                                    value={request.result}
                                                    onChange={(e) => updateLabRequest(index, 'result', e.target.value)}
                                                    disabled={loading || savingLabRequests}
                                                />
                                            </div>
                                            <div className="col-md-2">
                                                <label className="form-label fw-bold">Thao tác</label>
                                                <div>
                                                    <button
                                                        type="button"
                                                        className="btn btn-sm btn-outline-danger"
                                                        onClick={() => removeLabRequest(index)}
                                                        disabled={loading || savingLabRequests}
                                                        title="Xóa xét nghiệm"
                                                    >
                                                        <i className="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        {request.testType && (
                                            <div className="mt-2">
                                                <small className="text-info fw-bold">
                                                    <i className="fas fa-check-circle me-1"></i>
                                                    Trạng thái: {request.status || "PENDING"}
                                                </small>
                                            </div>
                                        )}
                                    </div>
                                ))}

                                {getLabRequestsCount() > 0 && (
                                    <div className="mt-3 p-2 bg-info bg-opacity-10 rounded">
                                        <div className="d-flex justify-content-between align-items-center">
                                            <span className="fw-bold text-primary">
                                                <i className="fas fa-flask me-1"></i>
                                                Tổng số xét nghiệm:
                                            </span>
                                            <span className="fw-bold text-success fs-5">
                                                {getLabRequestsCount()} xét nghiệm
                                            </span>
                                        </div>
                                        <div className="d-flex justify-content-between align-items-center mt-2">
                                            <span className="fw-bold text-primary">
                                                <i className="fas fa-money-bill me-1"></i>
                                                Tổng chi phí:
                                            </span>
                                            <span className="fw-bold text-warning fs-5">
                                                {getTotalAmount().toLocaleString()} VNĐ
                                            </span>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>

                        <div className="modal-footer">
                            <button
                                type="button"
                                className="btn btn-secondary"
                                onClick={onClose}
                                disabled={loading || saving || savingNote || savingLabRequests}
                            >
                                Hủy
                            </button>

                           
                        </div>
                    </form>
                </motion.div>
            </div>
        </div>
    );
} 