import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { DoctorAppointmentApi } from "../../service/DoctorAppointmentApi";

export default function AppointmentNotePage() {
    const { appointmentId } = useParams();
    const navigate = useNavigate();
    const [appointment, setAppointment] = useState(null);
    const [formData, setFormData] = useState({
        note: "",
        labRequests: []
    });
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [savingNote, setSavingNote] = useState(false);
    const [savingLabRequests, setSavingLabRequests] = useState(false);
    const [error, setError] = useState("");
    const [medicalVisitId, setMedicalVisitId] = useState(null);

    useEffect(() => {
        if (appointmentId) {
            fetchAppointmentAndMedicalVisit();
        }
    }, [appointmentId]);

    const fetchAppointmentAndMedicalVisit = async () => {
        try {
            setLoading(true);

            // Fetch appointment details first
            const appointments = await DoctorAppointmentApi.getMyAppointments();
            const appointmentData = appointments.find(apt => apt.id == appointmentId);

            if (!appointmentData) {
                setError("Không tìm thấy cuộc hẹn!");
                return;
            }

            setAppointment(appointmentData);

            // Then fetch medical visit data
            const response = await DoctorAppointmentApi.getMedicalVisit(
                appointmentId,
                appointmentData.patient.id
            );

            // Map response to form data
            setMedicalVisitId(response.medicalVisit.id);
            setFormData({
                note: response.medicalVisit.note || "",
                labRequests: response.labRequests?.map(lab => ({
                    labId: lab.labId,
                    visitId: lab.visitId,
                    requestedBy: lab.requestedBy,
                    roomId: lab.roomId,
                    testType: lab.testType,
                    result: lab.result || "",
                    status: lab.status || "PENDING",
                    price: lab.price || 0
                }))
            });
        } catch (err) {
            console.error("Error fetching appointment and medical visit:", err);
            setError("Không thể tải thông tin khám bệnh. Vui lòng thử lại!");
        } finally {
            setLoading(false);
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const addLabRequest = () => {
        setFormData(prev => ({
            ...prev,
            labRequests: [...prev.labRequests, {
                labId: null, // Will be generated by backend
                visitId: medicalVisitId,
                requestedBy: "", // Will be set by backend (doctor info)
                roomId: null,
                testType: "",
                result: "",
                status: "PENDING",
                price: 0
            }]
        }));
    };

    const removeLabRequest = async (index) => {
        const labRequest = formData.labRequests[index];

        // If lab request has labId, it means it's already saved in database
        if (labRequest.labId) {
            if (!window.confirm(`⚠️ CẢNH BÁO: Bạn đang xóa xét nghiệm "${labRequest.testType}" đã được lưu trong hệ thống.\n\nHành động này không thể hoàn tác. Bạn có chắc chắn muốn tiếp tục?`)) {
                return;
            }

            try {
                setSavingLabRequests(true);
                // Call API to delete from database
                await DoctorAppointmentApi.deleteLabRequest(labRequest.labId);

                // Refresh data from server after successful deletion
                await fetchAppointmentAndMedicalVisit();

                alert("✅ Xóa xét nghiệm thành công khỏi hệ thống!");
            } catch (err) {
                alert("❌ Có lỗi xảy ra khi xóa xét nghiệm khỏi hệ thống!");
                console.error("Error deleting lab request:", err);
            } finally {
                setSavingLabRequests(false);
            }
        } else {
            // If no labId, just remove from local state (not saved yet)
            if (labRequest.testType && !window.confirm(`Bạn có muốn xóa xét nghiệm "${labRequest.testType}" khỏi danh sách?`)) {
                return;
            }

            setFormData(prev => ({
                ...prev,
                labRequests: prev.labRequests.filter((_, i) => i !== index)
            }));
        }
    };

    const updateLabRequest = (index, field, value) => {
        setFormData(prev => ({
            ...prev,
            labRequests: prev.labRequests.map((item, i) => {
                if (i === index) {
                    return { ...item, [field]: value };
                }
                return item;
            })
        }));
    };

    const getLabRequestsCount = () => {
        return formData.labRequests?.filter(request => request.testType).length;
    };

    const getTotalAmount = () => {
        return formData.labRequests?.reduce((total, request) => total + (request.price || 0), 0);
    };

    const getNewLabRequestsCount = () => {
        return formData.labRequests.filter(request => request.testType && !request.labId).length;
    };

    const getNewLabRequestsTotal = () => {
        return formData.labRequests
            .filter(request => request.testType && !request.labId)
            .reduce((total, request) => total + (request.price || 0), 0);
    };

    const handleCreateBill = async () => {
        if (window.confirm(`Xác nhận tạo hóa đơn và thanh toán cho bệnh nhân ${appointment?.patient?.fullName}?`)) {
            try {
                // Call API to create invoice and payment based on lab requests
                await DoctorAppointmentApi.createInvoiceAndPayment(appointment.id);
                alert("Tạo hóa đơn và phiếu thanh toán thành công! Bệnh nhân có thể vào thanh toán.");
                // Refresh data to update bill status
                navigate("/doctor/appointments");
            } catch (err) {
                alert("Có lỗi xảy ra khi tạo hóa đơn!");
                console.error("Error creating invoice and payment:", err);
            }
        }
    };

    // Save medical visit note only
    const handleSaveNote = async () => {
        if (!formData.note.trim()) {
            setError("Vui lòng nhập ghi chú khám bệnh!");
            return;
        }

        try {
            setSavingNote(true);
            setError("");

            const noteData = {
                note: formData.note.trim()
            };

            await DoctorAppointmentApi.updateMedicalVisitNote(
                appointmentId,
                noteData
            );

            alert("Lưu ghi chú khám bệnh thành công!");
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu ghi chú khám bệnh. Vui lòng thử lại!");
            console.error("Error saving note:", err);
        } finally {
            setSavingNote(false);
        }
    };

    // Save lab requests only
    const handleSaveLabRequests = async () => {
        const newLabRequests = formData.labRequests.filter(request =>
            request.testType && !request.labId // New requests don't have labId yet
        );

        if (newLabRequests.length === 0) {
            setError("Không có xét nghiệm mới nào để lưu!");
            return;
        }

        try {
            setSavingLabRequests(true);
            setError("");

            for (const labRequest of newLabRequests) {
                const labRequestData = {
                    requestedBy: labRequest.requestedBy,
                    roomId: labRequest.roomId,
                    testType: labRequest.testType,
                    result: labRequest.result,
                    status: labRequest.status || "PENDING",
                    price: labRequest.price || 0
                };

                await DoctorAppointmentApi.createLabRequest(medicalVisitId, labRequestData);
            }

            alert(`Đã thêm ${newLabRequests.length} xét nghiệm thành công!`);
            // Refresh data after adding lab requests
            fetchAppointmentAndMedicalVisit();
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu xét nghiệm. Vui lòng thử lại!");
            console.error("Error saving lab requests:", err);
        } finally {
            setSavingLabRequests(false);
        }
    };

    // Save both note and lab requests
    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!formData.note.trim()) {
            setError("Vui lòng nhập ghi chú khám bệnh!");
            return;
        }

        try {
            setSaving(true);
            setError("");

            // First, update medical visit with note
            const noteData = {
                note: formData.note.trim()
            };

            await DoctorAppointmentApi.updateMedicalVisitNote(
                appointmentId,
                appointment.patient.id,
                noteData
            );

            // Then, create new lab requests
            const newLabRequests = formData.labRequests.filter(request =>
                request.testType && !request.labId // New requests don't have labId yet
            );

            for (const labRequest of newLabRequests) {
                const labRequestData = {
                    requestedBy: labRequest.requestedBy,
                    roomId: labRequest.roomId,
                    testType: labRequest.testType,
                    result: labRequest.result,
                    status: labRequest.status || "PENDING",
                    price: labRequest.price || 0
                };

                await DoctorAppointmentApi.createLabRequest(medicalVisitId, labRequestData);
            }

            alert("Lưu thông tin khám bệnh thành công!");
            navigate("/doctor/appointments");
        } catch (err) {
            setError("Có lỗi xảy ra khi lưu thông tin khám bệnh. Vui lòng thử lại!");
            console.error("Error saving medical visit:", err);
        } finally {
            setSaving(false);
        }
    };

    const formatPatientInfo = () => {
        const patient = appointment?.patient;
        if (!patient) return "N/A";

        function formatDate(dateString) {
            if (!dateString) return "null";

            let d = new Date(
                /(\+|\-)\d{2}:\d{2}|Z$/.test(dateString)
                    ? dateString
                    : dateString.replace(' ', 'T')
            );

            if (isNaN(d.getTime())) return dateString;

            // Hiển thị theo múi giờ máy người dùng (local time)
            const day = String(d.getDate()).padStart(2, '0');
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const year = d.getFullYear();
            const hour = String(d.getHours()).padStart(2, '0');
            const minute = String(d.getMinutes()).padStart(2, '0');

            return `${day}/${month}/${year} ${hour}:${minute}`;
        }

        return (
            <div className="d-flex align-items-center">
                <div className="me-3">
                    <div className="fw-bold">{patient.fullName || "N/A"}</div>
                    <small className="text-muted">
                        <i className="fas fa-phone me-1"></i>
                        {patient.phone || "N/A"}
                    </small>
                </div>
                <div className="text-muted">
                    <small>
                        <i className="fas fa-calendar me-1"></i>
                        {formatDate(appointment.scheduledTime)}
                    </small>
                </div>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="container-fluid">
                <div className="d-flex justify-content-center mt-5">
                    <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Đang tải...</span>
                    </div>
                </div>
            </div>
        );
    }

    if (error && !appointment) {
        return (
            <div className="container-fluid">
                <div className="alert alert-danger" role="alert">
                    {error}
                </div>
                <button
                    className="btn btn-primary"
                    onClick={() => navigate("/doctor/appointments")}
                >
                    <i className="fas fa-arrow-left me-2"></i>
                    Quay lại danh sách cuộc hẹn
                </button>
            </div>
        );
    }

    return (
        <div className="container-fluid">
            <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
            >
                {/* Header */}
                <div className="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h2 className="fw-bold text-primary mb-1">
                            <i className="fas fa-stethoscope me-2"></i>
                            {appointment?.note ? "Cập nhật thông tin khám" : "Thông tin khám bệnh"}
                        </h2>
                        <p className="text-muted mb-0">
                            Ghi chú và xét nghiệm cho bệnh nhân
                        </p>
                    </div>
                    <button
                        className="btn btn-outline-secondary"
                        onClick={() => navigate("/doctor/appointments")}
                    >
                        <i className="fas fa-arrow-left me-2"></i>
                        Quay lại
                    </button>
                </div>

                {error && (
                    <div className="alert alert-danger" role="alert">
                        {error}
                    </div>
                )}

                {/* Warning for unsaved lab requests */}
                {getNewLabRequestsCount() > 0 && (
                    <div className="alert alert-warning" role="alert">
                        <i className="fas fa-exclamation-triangle me-2"></i>
                        <strong>Cảnh báo:</strong> Có {getNewLabRequestsCount()} xét nghiệm chưa được lưu.
                        Vui lòng lưu xét nghiệm trước khi tạo hóa đơn.
                    </div>
                )}

                <form onSubmit={handleSubmit}>
                    <div className="row mr-2">
                        <div className="col-lg-10">
                            {/* Patient Info */}
                            <div className="card mb-4">
                                <div className="card-header bg-light">
                                    <h6 className="fw-bold mb-0">
                                        <i className="fas fa-user me-2"></i>
                                        Thông tin bệnh nhân
                                    </h6>
                                </div>
                                <div className="card-body">
                                    {formatPatientInfo()}
                                </div>
                            </div>

                            {/* Note Input */}
                            <div className="card mb-4">
                                <div className="card-header bg-light">
                                    <div className="d-flex justify-content-between align-items-center">
                                        <h6 className="fw-bold mb-0">
                                            <i className="fas fa-clipboard me-2"></i>
                                            Ghi chú khám bệnh <span className="text-danger">*</span>
                                        </h6>
                                        <button
                                            type="button"
                                            className="btn btn-sm btn-outline-primary"
                                            onClick={handleSaveNote}
                                            disabled={savingNote || !formData.note.trim()}
                                        >
                                            {savingNote ? (
                                                <>
                                                    <div className="spinner-border spinner-border-sm me-1" role="status"></div>
                                                    Đang lưu...
                                                </>
                                            ) : (
                                                <>
                                                    <i className="fas fa-save me-1"></i>
                                                    Lưu ghi chú
                                                </>
                                            )}
                                        </button>
                                    </div>
                                </div>
                                <div className="card-body">
                                    <textarea
                                        className="form-control"
                                        name="note"
                                        value={formData.note}
                                        onChange={handleInputChange}
                                        rows="6"
                                        placeholder="Nhập ghi chú về tình trạng sức khỏe, kết quả khám, chẩn đoán và hướng điều trị..."
                                        required
                                        autoFocus
                                        disabled={savingNote}
                                    />
                                    <small className="text-muted">
                                        Ghi chú sẽ được lưu vào hồ sơ bệnh nhân
                                    </small>
                                </div>
                            </div>

                            {/* Lab Requests */}
                            <div className="card mb-4">
                                <div className="card-header bg-light">
                                    <div className="d-flex justify-content-between align-items-center">
                                        <h6 className="fw-bold mb-0">
                                            <i className="fas fa-flask me-2"></i>
                                            Xét nghiệm/Dịch vụ
                                        </h6>
                                        <div>
                                            <button
                                                type="button"
                                                className="btn btn-sm btn-outline-success me-2"
                                                onClick={addLabRequest}
                                                disabled={savingLabRequests}
                                            >
                                                <i className="fas fa-plus-circle me-1"></i>
                                                Thêm xét nghiệm
                                            </button>
                                            <button
                                                type="button"
                                                className="btn btn-sm btn-outline-primary"
                                                onClick={handleSaveLabRequests}
                                                disabled={savingLabRequests || getNewLabRequestsCount() === 0}
                                            >
                                                {savingLabRequests ? (
                                                    <>
                                                        <div className="spinner-border spinner-border-sm me-1" role="status"></div>
                                                        Đang lưu...
                                                    </>
                                                ) : (
                                                    <>
                                                        <i className="fas fa-flask me-1"></i>
                                                        Lưu xét nghiệm ({getNewLabRequestsCount()} mới)
                                                    </>
                                                )}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div className="card-body">
                                    {formData.labRequests.map((request, index) => (
                                        <div key={request.labId || index} className={`border rounded p-3 mb-3 ${request.labId ? 'bg-light' : 'bg-warning bg-opacity-10'}`}>
                                            <div className="row">
                                                <div className="col-md-4">
                                                    <label className="form-label fw-bold">
                                                        Loại xét nghiệm
                                                        {request.labId && <i className="fas fa-check-circle text-success ms-1" title="Đã lưu"></i>}
                                                        {!request.labId && <i className="fas fa-exclamation-circle text-warning ms-1" title="Chưa lưu"></i>}
                                                    </label>
                                                    <input
                                                        type="text"
                                                        className="form-control"
                                                        placeholder="Nhập tên xét nghiệm"
                                                        value={request.testType}
                                                        onChange={(e) => updateLabRequest(index, 'testType', e.target.value)}
                                                        disabled={savingLabRequests || !!request.labId}
                                                    />
                                                </div>
                                                <div className="col-md-3">
                                                    <label className="form-label fw-bold">Giá tiền</label>
                                                    <input
                                                        type="number"
                                                        className="form-control"
                                                        placeholder="0"
                                                        value={request.price}
                                                        onChange={(e) => updateLabRequest(index, 'price', parseFloat(e.target.value) || 0)}
                                                        disabled={savingLabRequests || !!request.labId}
                                                    />
                                                </div>
                                                <div className="col-md-3">
                                                    <label className="form-label fw-bold">Ghi chú</label>
                                                    <input
                                                        type="text"
                                                        className="form-control"
                                                        placeholder="Ghi chú cho xét nghiệm"
                                                        value={request.result}
                                                        onChange={(e) => updateLabRequest(index, 'result', e.target.value)}
                                                        disabled={savingLabRequests || !!request.labId}
                                                    />
                                                </div>
                                                <div className="col-md-2">
                                                    <label className="form-label fw-bold">Thao tác</label>
                                                    <div>
                                                        <button
                                                            type="button"
                                                            className={`btn btn-sm ${request.labId ? 'btn-danger' : 'btn-outline-danger'}`}
                                                            onClick={() => removeLabRequest(index)}
                                                            disabled={savingLabRequests}
                                                            title={request.labId ? "Xóa khỏi hệ thống" : "Xóa khỏi danh sách"}
                                                        >
                                                            {savingLabRequests ? (
                                                                <div className="spinner-border spinner-border-sm" role="status"></div>
                                                            ) : (
                                                                <i className="fas fa-trash"></i>
                                                            )}
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            {request.testType && (
                                                <div className="mt-2 d-flex justify-content-between align-items-center">
                                                    <small className="text-info fw-bold">
                                                        <i className="fas fa-check-circle me-1"></i>
                                                        Trạng thái: {request.status || "PENDING"}
                                                    </small>
                                                    <span className={`badge ${request.labId ? 'bg-success' : 'bg-warning'}`}>
                                                        <i className={`fas ${request.labId ? 'fa-database' : 'fa-clock'} me-1`}></i>
                                                        {request.labId ? 'Đã lưu vào hệ thống' : 'Chưa lưu'}
                                                    </span>
                                                </div>
                                            )}
                                        </div>
                                    ))}

                                    {getLabRequestsCount() > 0 && (
                                        <div className="mt-3 p-3 bg-info bg-opacity-10 rounded">
                                            <div className="d-flex justify-content-between align-items-center">
                                                <span className="fw-bold text-primary">
                                                    <i className="fas fa-flask me-1"></i>
                                                    Tổng số xét nghiệm:
                                                </span>
                                                <span className="fw-bold text-success fs-5">
                                                    {getLabRequestsCount()} xét nghiệm
                                                </span>
                                            </div>
                                            <div className="d-flex justify-content-between align-items-center mt-2">
                                                <span className="fw-bold text-primary">
                                                    <i className="fas fa-money-bill me-1"></i>
                                                    Tổng chi phí:
                                                </span>
                                                <span className="fw-bold text-warning fs-5">
                                                    {getTotalAmount().toLocaleString()} VNĐ
                                                </span>
                                            </div>
                                        </div>
                                    )}

                                    {getNewLabRequestsCount() > 0 && (
                                        <div className="mt-3 p-3 bg-warning bg-opacity-10 rounded border border-warning">
                                            <div className="d-flex justify-content-between align-items-center">
                                                <span className="fw-bold text-warning">
                                                    <i className="fas fa-exclamation-triangle me-1"></i>
                                                    Xét nghiệm chưa lưu:
                                                </span>
                                                <span className="fw-bold text-danger fs-5">
                                                    {getNewLabRequestsCount()} xét nghiệm - {getNewLabRequestsTotal().toLocaleString()} VNĐ
                                                </span>
                                            </div>
                                            <small className="text-muted d-block mt-1">
                                                <i className="fas fa-info-circle me-1"></i>
                                                Nhấn "Lưu xét nghiệm" để lưu các xét nghiệm chưa được lưu
                                            </small>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        <div className="col-lg-2">
                            {/* Summary Card */}
                            <div className="card sticky-top" style={{ top: "116px" }}>
                                <div className="card-header bg-primary text-white">
                                    <h6 className="fw-bold mb-0">
                                        <i className="fas fa-info-circle me-2"></i>
                                        Tóm tắt
                                    </h6>
                                </div>
                                <div className="card-body w-100">
                                    <div className="mb-3">
                                        <h6 className="fw-bold text-primary">Thông tin bệnh nhân</h6>
                                        <p className="mb-1"><strong>Tên:</strong> {appointment?.patient?.fullName}</p>
                                        <p className="mb-1"><strong>SĐT:</strong> {appointment?.patient?.phone}</p>
                                        <p className="mb-0"><strong>Ngày khám:</strong> {appointment?.scheduledTime ? new Date(appointment.scheduledTime).toLocaleDateString('vi-VN') : 'N/A'}</p>
                                    </div>

                                    <div className="mb-3">
                                        <h6 className="fw-bold text-primary">Thống kê</h6>
                                        <p className="mb-1"><strong>Xét nghiệm đã lưu:</strong> {formData.labRequests.filter(r => r.labId).length}</p>
                                        <p className="mb-1"><strong>Xét nghiệm chưa lưu:</strong> {getNewLabRequestsCount()}</p>
                                        <p className="mb-1"><strong>Tổng chi phí:</strong> {getTotalAmount().toLocaleString()} VNĐ</p>
                                        <p className="mb-0">
                                            <strong>Trạng thái hóa đơn:</strong>
                                            <span className={`badge ms-2 ${appointment?.billGenerated ? 'bg-success' : 'bg-warning'}`}>
                                                {appointment?.billGenerated ? 'Đã tạo' : 'Chưa tạo'}
                                            </span>
                                        </p>
                                    </div>

                                    <div className="d-grid gap-1 text-center" style={{ maxWidth: '300px' }}>
                                       

                                        <button
                                            type="button"
                                            className={`btn ${appointment?.billGenerated ? 'btn-success' : 'btn-outline-warning'}`}
                                            onClick={handleCreateBill}
                                            disabled={appointment?.billGenerated || getNewLabRequestsCount() > 0}
                                            title={
                                                appointment?.billGenerated
                                                    ? "Đã tạo hóa đơn"
                                                    : getNewLabRequestsCount() > 0
                                                        ? "Vui lòng lưu xét nghiệm trước khi tạo hóa đơn"
                                                        : "Tạo hóa đơn và phiếu thanh toán"
                                            }
                                        >
                                            <i className={`fas ${appointment?.billGenerated ? 'fa-check-circle' : 'fa-file-invoice-dollar'} me-2`}></i>
                                            {appointment?.billGenerated
                                                ? "Đã tạo hóa đơn"
                                                : getNewLabRequestsCount() > 0
                                                    ? "Lưu xét nghiệm trước"
                                                    : "Tạo hóa đơn"
                                            }
                                        </button>

                                        <button
                                            type="button"
                                            className="btn btn-outline-secondary"
                                            onClick={() => navigate("/doctor/appointments")}
                                        >
                                            <i className="fas fa-arrow-left me-2"></i>
                                            Quay lại
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </motion.div>
        </div>
    );
} 